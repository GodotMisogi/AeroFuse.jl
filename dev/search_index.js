var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Aircraft-Geometry-API","page":"API","title":"Aircraft Geometry API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [AeroMDAO.AircraftGeometry]","category":"page"},{"location":"api/#AeroMDAO.AircraftGeometry.AbstractSpacing","page":"API","title":"AeroMDAO.AircraftGeometry.AbstractSpacing","text":"An abstract type to define custom spacing distributions.\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.AircraftGeometry.Foil","page":"API","title":"AeroMDAO.AircraftGeometry.Foil","text":"Foil(x, y, name = \"Unnamed\")\nFoil(coordinates, name = \"Unnamed\")\n\nStructure consisting of foil coordinates in 2 dimensions with an optional name. \n\nThe coordinates should be provided in Selig format for compatibility with other AeroMDAO tools.\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.AircraftGeometry.HalfWing","page":"API","title":"AeroMDAO.AircraftGeometry.HalfWing","text":"HalfWing(; foils :: Vector{Foil}, \n           chords, \n           twists, \n           spans, \n           dihedrals, \n           LE_sweeps,\n           position = zeros(3),\n           angle    = 0.\n           axis     = [0.,1.,0.])\n\nDefinition for a HalfWing consisting of N+1 Foils, their associated chord lengths c and twist angles ι, for N sections with span lengths b, dihedrals δ and sweep angles Λ, with all angles in degrees.\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.AircraftGeometry.Wing","page":"API","title":"AeroMDAO.AircraftGeometry.Wing","text":"Wing(; foils, chords, twists, \n       spans, dihedrals, LE_sweeps,\n       position, angle, axis)\n\nWing(left :: HalfWing, right :: HalfWing)\nWing(half :: HalfWing)\n\nA composite type consisting of fields left and right, each a HalfWing for constructing a wing.\n\nA single argument generates a symmetric Wing.\n\nArguments\n\nfoils :: Vector{Foil}\nchords\ntwists\nspans\ndihedrals\nLE_sweeps\nposition = zeros(3)\nangle    = 0\naxis     = [0.,1.,0.]\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.AircraftGeometry.HalfWingSection-Tuple{}","page":"API","title":"AeroMDAO.AircraftGeometry.HalfWingSection","text":"HalfWingSection(; span, dihedral, LE_sweep, taper, root_chord,\n                  root_twist, tip_twist, root_foil, tip_foil,\n                  position, angle, axis)\n\nDefine a HalfWing consisting of a single trapezoidal section.\n\nArguments\n\nspan       :: Real         = 1.: Span length \ndihedral   :: Real         = 1.: Dihedral angle (degrees)\nLE_sweep   :: Real         = 0.: Leading-edge sweep angle (degrees)\ntaper      :: Real         = 1.: Taper ratio of tip to root chord\nroot_chord :: Real         = 1.: Root chord length\nroot_twist :: Real         = 0.: Twist angle at root (degrees)\ntip_twist  :: Real         = 0.: Twist angle at tip (degrees)\nroot_foil  :: Array{Real}  = naca4((0,0,1,2)): Foil coordinates at root\ntip_foil   :: Array{Real}  = naca4((0,0,1,2)): Foil coordinates at tip\nposition   :: Vector{Real} = zeros(3): Position\nangle      :: Real         = 0.: Angle of rotation (degrees)\naxis       :: Vector{Real} = [0.,1.,0.]: Axis of rotation\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.WingSection-Tuple{}","page":"API","title":"AeroMDAO.AircraftGeometry.WingSection","text":"WingSection(; span, dihedral, LE_sweep, taper, root_chord,\n              root_twist, tip_twist, root_foil, tip_foil,\n              position, angle, axis)\n\nDefine a Wing consisting of two trapezoidal sections with one plane of symmetry.\n\nArguments\n\nspan       :: Real         = 1.: Span length \ndihedral   :: Real         = 1.: Dihedral angle (degrees)\nLE_sweep   :: Real         = 0.: Leading-edge sweep angle (degrees)\ntaper      :: Real         = 1.: Taper ratio of tip to root chord\nroot_chord :: Real         = 1.: Root chord length\nroot_twist :: Real         = 0.: Twist angle at root (degrees)\ntip_twist  :: Real         = 0.: Twist angle at tip (degrees)\nroot_foil  :: Array{Real}  = naca4((0,0,1,2)): Foil coordinates at root\ntip_foil   :: Array{Real}  = naca4((0,0,1,2)): Foil coordinates at tip\nposition   :: Vector{Real} = zeros(3): Position\nangle      :: Real         = 0.: Angle of rotation (degrees)\naxis       :: Vector{Real} = [0.,1.,0.]: Axis of rotation\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.arc_length-Tuple{Foil}","page":"API","title":"AeroMDAO.AircraftGeometry.arc_length","text":"arc_length(foil :: Foil)\n\nCompute the arc-length of a Foil.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.aspect_ratio-Tuple{Any}","page":"API","title":"AeroMDAO.AircraftGeometry.aspect_ratio","text":"aspect_ratio(wing :: AbstractWing)\n\nCompute the aspect ratio of an AbstractWing.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.camber_CST","page":"API","title":"AeroMDAO.AircraftGeometry.camber_CST","text":"camber_CST(α_c, α_t,\n           (Δz_u, Δz_l) :: NTuple{2, Real},\n           coeff_LE = 0.,\n           n :: Integer = 40)\n\nDefine a cosine-spaced foil with 2n points using the Class Shape Transformation method on a Bernstein polynomial basis for the camber and thickness coordinates.\n\nThe foil is defined by arrays of coefficients (α_c α_t) for the upper and lower surfaces, trailing-edge spacing values (Δz_uΔz_l), and a coefficient for the leading edge modifications.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.camber_coordinates-Tuple{Any}","page":"API","title":"AeroMDAO.AircraftGeometry.camber_coordinates","text":"camber_coordinates(coords :: Array{2, <: Real})\n\nGenerate the camber coordinates on the x-z plane at y = 0.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.camber_coordinates-Tuple{HalfWing, Vector{<:Integer}, Integer}","page":"API","title":"AeroMDAO.AircraftGeometry.camber_coordinates","text":"camber_coordinates(wing :: HalfWing, n_s :: Integer, n_c :: Integer, flip = false)\n\nCompute the camber coordinates of a HalfWing consisting of camber distributions of Foils and relevant geometric quantities, given numbers of spanwise n_s and chordwise n_c panels, with an option to flip the signs of the y-coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.camber_thickness","page":"API","title":"AeroMDAO.AircraftGeometry.camber_thickness","text":"camber_thickness(foil :: Foil, num :: Integer)\n\nCompute the camber-thickness distribution of a Foil with cosine spacing.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.camber_thickness_to_coordinates-Tuple{Any, Any, Any}","page":"API","title":"AeroMDAO.AircraftGeometry.camber_thickness_to_coordinates","text":"camber_thickness_to_coordinates(xs, camber, thickness)\n\nConvert the camber-thickness representation to 2-dimensional coordinates given the x-locations and their corresponding camber and thickness values.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.chord_coordinates-Tuple{HalfWing, Vector{<:Integer}, Integer}","page":"API","title":"AeroMDAO.AircraftGeometry.chord_coordinates","text":"chord_coordinates(wing :: AbstractWing, n_s :: Integer, n_c :: Integer, flip = false)\n\nCompute the chord coordinates of a HalfWing consisting of Foils and relevant geometric quantities, given numbers of spanwise n_s and chordwise n_c panels, with an option to flip the signs of the y-coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.coordinates-Tuple{Foil}","page":"API","title":"AeroMDAO.AircraftGeometry.coordinates","text":"coordinates(foil :: Foil)\n\nGenerate the array of Foil coordinates. \n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.coordinates_to_camber_thickness","page":"API","title":"AeroMDAO.AircraftGeometry.coordinates_to_camber_thickness","text":"coordinates_to_camber_thickness(coords, n = 40)\n\nConvert 2-dimensional coordinates to its camber-thickness representation after cosine interpolation with 2n points.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.cosine_foil","page":"API","title":"AeroMDAO.AircraftGeometry.cosine_foil","text":"cosine_foil(coordinates, n = 40)\n\nInterpolate a foil profile's coordinates by projecting the x-coordinates of a circle onto the geometry with 2n points.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.cosine_foil-Tuple{Foil, Integer}","page":"API","title":"AeroMDAO.AircraftGeometry.cosine_foil","text":"cosine_foil(foil :: Foil, num :: Integer)\n\nReturn a Foil with cosine spacing for a given number of points.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.kulfan_CST","page":"API","title":"AeroMDAO.AircraftGeometry.kulfan_CST","text":"kulfan_CST(alpha_u, alpha_l,\n           (Δz_u, Δz_l) = (0., 0.),\n           (LE_u, LE_l) = (0., 0.),\n           n            = 40)\n\nDefine a cosine-spaced foil with 2n points using the Class Shape Transformation method on a Bernstein polynomial basis for the upper and lower coordinates.\n\nThe foil is defined by arrays of coefficients (α_u α_l) for the upper and lower surfaces, trailing-edge spacing values (Δz_u Δz_l), and coefficients for leading edge modifications.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.leading_edge","page":"API","title":"AeroMDAO.AircraftGeometry.leading_edge","text":"leading_edge(wing :: HalfWing, flip = false)\n\nCompute the leading edge coordinates of a HalfWing, with an option to flip the signs of the y-coordinates.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.mean_aerodynamic_center-Tuple{AbstractWing}","page":"API","title":"AeroMDAO.AircraftGeometry.mean_aerodynamic_center","text":"mean_aerodynamic_chord(wing :: AbstractWing)\n\nCompute the coordinates of the mean aerodynamic center of an AbstractWing.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.mean_aerodynamic_chord-Tuple{AbstractWing}","page":"API","title":"AeroMDAO.AircraftGeometry.mean_aerodynamic_chord","text":"mean_aerodynamic_chord(wing :: AbstractWing)\n\nCompute the mean aerodynamic chord of an AbstractWing.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.mesh_cambers-Tuple{AbstractWing, Any, Any}","page":"API","title":"AeroMDAO.AircraftGeometry.mesh_cambers","text":"mesh_cambers(wing :: AbstractWing, n_s :: Integer, n_c :: Integer; spacings = symmetric_spacing(wing))\n\nMesh the camber distribution of a Wing into panels of n_s spanwise divisions per section and n_c chordwise divisions with an AbstractSpacing` distribution.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.mesh_horseshoes-Tuple{AbstractWing, Any, Any}","page":"API","title":"AeroMDAO.AircraftGeometry.mesh_horseshoes","text":"mesh_horseshoes(wing :: AbstractWing, n_s :: Vector{Integer}, n_c :: Integer; flip = false)\n\nMesh the span and chord distributions of an AbstractWing with n_s spanwise divisions per section and n_c chordwise divisions.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.mesh_wing-Tuple{AbstractWing, Any, Any}","page":"API","title":"AeroMDAO.AircraftGeometry.mesh_wing","text":"mesh_horseshoes(wing :: AbstractWing, n_s :: Vector{Integer}, n_c :: Integer; flip = false)\n\nMesh the span and airfoil coordinate distributions of an AbstractWing with n_s spanwise divisions per section and n_c chordwise divisions.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.naca4","page":"API","title":"AeroMDAO.AircraftGeometry.naca4","text":"naca4(digits :: NTuple{4, <: Real}, n :: Integer; sharp_trailing_edge :: Bool)\n\nGenerate the coordinates of a NACA 4-digit series profile.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.projected_area-Tuple{AbstractWing}","page":"API","title":"AeroMDAO.AircraftGeometry.projected_area","text":"projected_area(wing :: AbstractWing)\n\nCompute the projected area of an AbstractWing` by summing the trapezoidal areas.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.read_foil-Tuple{String}","page":"API","title":"AeroMDAO.AircraftGeometry.read_foil","text":"read_foil(path :: String; header = true)\n\nRead a '.dat' file consisting of 2D coordinates, for an airfoil as an array of SVectors, with an optional argument to skip the header.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.scale_foil-Tuple{Foil, Any}","page":"API","title":"AeroMDAO.AircraftGeometry.scale_foil","text":"scale_foil(foil :: Foil, scale)\n\nScale the coordinates of a Foil to a scaling value.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.span-Tuple{AbstractWing}","page":"API","title":"AeroMDAO.AircraftGeometry.span","text":"span(wing :: AbstractWing)\n\nCompute the planform span of an AbstractWing.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.surface_coordinates-Tuple{HalfWing, Vector{<:Integer}, Integer}","page":"API","title":"AeroMDAO.AircraftGeometry.surface_coordinates","text":"surface_coordinates(wing :: HalfWing, n_s :: Integer, n_c :: Integer, flip = false)\n\nCompute the surface coordinates of a HalfWing consisting of Foils and relevant geometric quantities, given numbers of spanwise n_s and chordwise n_c panels, with an option to flip the signs of the y-coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.thickness_coordinates-Tuple{Any}","page":"API","title":"AeroMDAO.AircraftGeometry.thickness_coordinates","text":"thickness_coordinates(coords :: Array{2, <: Real})\n\nGenerate the thickness coordinates on the x-z plane at y = 0.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.AircraftGeometry.wing_bounds","page":"API","title":"AeroMDAO.AircraftGeometry.wing_bounds","text":"wing_bounds(wing :: HalfWing, flip = false)\n\nCompute the leading and trailing edge coordinates of a HalfWing, with an option to flip the signs of the y-coordinates.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.AircraftGeometry.wing_bounds-Tuple{Wing}","page":"API","title":"AeroMDAO.AircraftGeometry.wing_bounds","text":"wing_bounds(wing :: Wing)\n\nReturn the leading and trailing edge coordinates of a Wing.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.properties-Tuple{AbstractWing}","page":"API","title":"AeroMDAO.properties","text":"properties(wing :: AbstractWing)\n\nCompute the generic properties of interest (span, area, etc.) of an AbstractWing.\n\n\n\n\n\n","category":"method"},{"location":"api/#Panel-Geometry-API","page":"API","title":"Panel Geometry API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [AeroMDAO.PanelGeometry]","category":"page"},{"location":"api/#AeroMDAO.PanelGeometry.Panel3D","page":"API","title":"AeroMDAO.PanelGeometry.Panel3D","text":"Panel3D(p1, p2, p3, p4)\n\nFour Cartesian coordinates p1, p2, p3, p4 representing corners of a panel in 3 dimensions. The following commutative diagram (math joke) depicts the order:\n\nz → y\n↓\nx\n        p1 —→— p4\n        |       |\n        ↓       ↓\n        |       |\n        p2 —→— p3\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.PanelGeometry.make_panels-Tuple{Any}","page":"API","title":"AeroMDAO.PanelGeometry.make_panels","text":"make_panels(xyzs)\n\nConvert an array of coordinates corresponding to a wing, ordered from root to tip and leading-edge to trailing-edge, into panels.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.midpoint-Tuple{Panel3D}","page":"API","title":"AeroMDAO.PanelGeometry.midpoint","text":"midpoint(panel :: Panel3D)\n\nCompute the midpoint of a Panel3D.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.panel_area-Tuple{Panel3D}","page":"API","title":"AeroMDAO.PanelGeometry.panel_area","text":"panel_area(panel :: Panel3D)\n\nCompute the (possibly non-planar, hence nonsensical) area of a Panel3D.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.panel_coordinates-Tuple{Panel3D}","page":"API","title":"AeroMDAO.PanelGeometry.panel_coordinates","text":"panel_coordinates(panel :: Panel3D)\n\nCompute the coordinates of a Panel3D.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.panel_normal-Tuple{Panel3D}","page":"API","title":"AeroMDAO.PanelGeometry.panel_normal","text":"panel_normal(panel :: Panel3D)\n\nCompute the normal vector of a Panel3D.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.reflect_xz-Tuple{Panel3D}","page":"API","title":"AeroMDAO.PanelGeometry.reflect_xz","text":"reflect_xz(panel :: Panel3D)\n\nReflect a Panel3D with respect to the x-z plane of its reference coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.transform-Tuple{Panel3D, Any, Any}","page":"API","title":"AeroMDAO.PanelGeometry.transform","text":"transform(panel :: Panel3D, rotation, translation)\n\nPerform an affine transformation on the coordinates of a Panel3D given a rotation matrix and translation vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.transform_normal-Tuple{Panel3D, Any, Any}","page":"API","title":"AeroMDAO.PanelGeometry.transform_normal","text":"transform_normal(panel :: Panel3D, h_l, g_l)\n\nTransform the normal vector of a Panel3D about the hinge axis ĥ_l by the control gain g_l.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.PanelGeometry.wetted_area-Tuple{Any}","page":"API","title":"AeroMDAO.PanelGeometry.wetted_area","text":"wetted_area(panels :: Array{Panel3D})\n\nCompute the total wetted area by summing the areas of an array of Panel3D.\n\n\n\n\n\n","category":"method"},{"location":"api/#Doublet-Source-Panel-API","page":"API","title":"Doublet-Source Panel API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [AeroMDAO.DoubletSource]","category":"page"},{"location":"api/#AeroMDAO.DoubletSource.boundary_vector-Tuple{Any, Any}","page":"API","title":"AeroMDAO.DoubletSource.boundary_vector","text":"boundary_vector(panels, u)\n\nCreate the vector for the boundary condition of the problem given an array of Panel2Ds and velocity u.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.doublet_matrix-Tuple{Any, Any}","page":"API","title":"AeroMDAO.DoubletSource.doublet_matrix","text":"doublet_matrix(panels_1, panels_2)\n\nCreate the matrix of doublet potential influence coefficients between pairs of panels1 and panels2.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.eval_coefficients-NTuple{6, Any}","page":"API","title":"AeroMDAO.DoubletSource.eval_coefficients","text":"aerodynamic_coefficients(vels, Δrs, panel_angles, speed, α)\n\nCompute the lift, moment, and pressure coefficients given associated arrays of edge speeds, adjacent collocation point distances, panel angles, the freestream speed, and angle of attack α.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.influence_matrix-Tuple{Any, AbstractPanel2D}","page":"API","title":"AeroMDAO.DoubletSource.influence_matrix","text":"influence_matrix(panels, wake_panel)\n\nAssemble the Aerodynamic Influence Coefficient matrix consisting of the doublet matrix, wake vector, Kutta condition given Panel2Ds and the wake panel.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.kutta_condition-Tuple{Any}","page":"API","title":"AeroMDAO.DoubletSource.kutta_condition","text":"kutta_condition(panels)\n\nCreate the vector describing Morino's Kutta condition given Panel2Ds.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.solve_strengths-NTuple{4, Any}","page":"API","title":"AeroMDAO.DoubletSource.solve_strengths","text":"solve_strengths(panels, u, wakes, bound)\n\nSolve the system of equations AICphi = vecU cdot hatn - Bsigma condition given the array of Panel2Ds, a velocity vec U, a vector of wake Panel2Ds, and an optional named bound for the length of the wake.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.solve_strengths-Tuple{Any, Any, Any, Any, Bool}","page":"API","title":"AeroMDAO.DoubletSource.solve_strengths","text":"solve_strengths(panels, u, sources, bound)\n\nSolve the system of equations AICphi = vecU cdot hatn - Bsigma condition given the array of Panel2Ds, a velocity vec U, a condition whether to disable source terms (σ = 0), and an optional named bound for the length of the wake.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.source_matrix-Tuple{Any, Any}","page":"API","title":"AeroMDAO.DoubletSource.source_matrix","text":"source_matrix(panels_1, panels_2)\n\nCreate the matrix of source potential influence coefficients between pairs of panels_1 and panels_2.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.source_strengths-Tuple{Any, Any}","page":"API","title":"AeroMDAO.DoubletSource.source_strengths","text":"source_strengths(panels, freestream)\n\nCreate the vector of source strengths for the Dirichlet boundary condition σ = vec U_infty cdot hatn given Panel2Ds and a Uniform2D.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.tangential_velocities-Tuple{Any, Any, Any, Bool}","page":"API","title":"AeroMDAO.DoubletSource.tangential_velocities","text":"tangential_velocities(panels, φs, u, sources :: Bool)\n\nCompute the tangential velocities and panel distances given the array of Panel2Ds, their associated doublet strengths φs, the velocity u, and a condition whether to disable source terms (σ = 0).\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.DoubletSource.wake_vector-Tuple{AbstractPanel2D, Any}","page":"API","title":"AeroMDAO.DoubletSource.wake_vector","text":"wake_vector(wake_panel, panels)\n\nCreate the vector of doublet potential influence coefficients from the wake on the panels given the wake panel and the array of Panel2Ds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Vortex-Lattice-API","page":"API","title":"Vortex Lattice API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [AeroMDAO.VortexLattice]","category":"page"},{"location":"api/#AeroMDAO.VortexLattice.Freestream","page":"API","title":"AeroMDAO.VortexLattice.Freestream","text":"Freestream(α, β, Ω)\nFreestream(α, β, Ω_x, Ω_y, Ω_z)\nFreestream(U, Ω)\nFreestream(; \n             alpha = 0., \n             beta  = 0., \n             omega = [0,0,0]\n           )\n\nDefine freestream conditions with angle of attack α (degrees), sideslip angle β (degrees), and (quasi-steady) rotation vector Ω for a vortex lattice analysis.\n\nAlternatively, provide the velocity vector U, which is normalized to determine the angles.\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.VortexLattice.Horseshoe","page":"API","title":"AeroMDAO.VortexLattice.Horseshoe","text":"Horseshoe(panel :: Panel3D, normal, drift = zeros(3))\n\nGenerate a Horseshoe corresponding to a Panel3D, an associated normal vector, and a \"drift velocity\".\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.VortexLattice.Horseshoe-2","page":"API","title":"AeroMDAO.VortexLattice.Horseshoe","text":"Horseshoe(bound_leg, collocation_point, normal, chord)\n\nDefine a horseshoe vortex based on a bound leg, a collocation point, a normal vector, and a \"chord length\".\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.VortexLattice.Line","page":"API","title":"AeroMDAO.VortexLattice.Line","text":"Line(r1 :: SVector{3,<: Real}, r2 :: SVector{3,<: Real})\n\nDefine a line segment based on two 3-dimensional vectors.\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.VortexLattice.References","page":"API","title":"AeroMDAO.VortexLattice.References","text":"References(V, ρ, μ, S, b, c, r)\nReferences(; speed, density, viscosity,\n             sound_speed, area, span, \n             chord, location)\n\nDefine reference values with speed V, density ρ, dynamic viscosity μ, area S, span b, chord c, location r for a vortex lattice analysis.\n\nArguments\n\nspeed       :: Real         = 1.: Speed (m/s)\ndensity     :: Real         = 1.225: Density (m)\nviscosity   :: Real         = 1.5e-5: Dynamic viscosity (m)\nsound_speed :: Real         = 330.: Speed of sound (m/s)\nspan        :: Real         = 1.: Span length (m)\narea        :: Real         = 1.: Area (m²)\nchord       :: Real         = 1.: Chord length (m)\nlocation    :: Vector{Real} = [0,0,0]: Position\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.VortexLattice.VortexRing","page":"API","title":"AeroMDAO.VortexLattice.VortexRing","text":"VortexRing{T <: Real}(left_leg, bound_leg, back_leg, right_leg)\n\nA vortex ring type consisting of four finite vortex line filaments connected in a loop.\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.VortexLattice.VortexRing-Union{Tuple{Panel3D{T}}, Tuple{T}} where T<:Real","page":"API","title":"AeroMDAO.VortexLattice.VortexRing","text":"Constructor for vortex rings on a Panel3D using Lines. The following convention is adopted:\n\n    p1 —bound_leg→ p4\n    |               |\nleft_leg       right_leg\n    ↓               ↓\n    p2 —back_leg→ p3\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.body_frame_velocity-Tuple{Freestream}","page":"API","title":"AeroMDAO.VortexLattice.body_frame_velocity","text":"body_frame_velocity(freestream :: Freestream)\n\nCompute the velocity of Freestream in the body reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.bound_leg-Tuple{Horseshoe}","page":"API","title":"AeroMDAO.VortexLattice.bound_leg","text":"bound_leg(horseshoe :: Horseshoe)\n\nGetter for bound leg field of a Horseshoe.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.bound_leg-Tuple{Panel3D}","page":"API","title":"AeroMDAO.VortexLattice.bound_leg","text":"bound_leg(panel :: Panel3D)\n\nCompute the bound leg for a Panel3D, for horseshoes/vortex rings.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.bound_leg_center-Tuple{Horseshoe}","page":"API","title":"AeroMDAO.VortexLattice.bound_leg_center","text":"Compute the midpoint of the bound leg of a Horseshoe.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.bound_leg_vector-Tuple{Horseshoe}","page":"API","title":"AeroMDAO.VortexLattice.bound_leg_vector","text":"Compute the direction vector of the bound leg of a Horseshoe.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.boundary_condition-Tuple{Any, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.boundary_condition","text":"boundary_condition(velocities, normals)\n\nCompute the projection of a velocity vector with respect to normal vectors of panels. Corresponds to construction of the boundary condition for the RHS of the AIC system.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.compute_farfield_forces-NTuple{6, Any}","page":"API","title":"AeroMDAO.VortexLattice.compute_farfield_forces","text":"compute_farfield_forces(Δφs, Δs, ∂φ_∂n, θs, V, ρ)\n\nCompute the aerodynamic forces in the Trefftz plane given cumulative doublet strengths Δφs, Trefftz panel lengths Δs, doublet-normal directional derivatives φn, Trefftz panel angles θs, the freestream speed V and density ρ.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.doublet_normal_derivatives-Tuple{Vector{<:AeroMDAO.VortexLattice.Line}, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.doublet_normal_derivatives","text":"doublet_normal_derivatives(wake_lines :: Vector{<: Line}, Δφs, normals)\n\nCompute the normal derivative strengths of the doublets given the wake Lines, net doublet strengths Δφs, and associated normal vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.farfield_forces-NTuple{6, Any}","page":"API","title":"AeroMDAO.VortexLattice.farfield_forces","text":"farfield_forces(Γs, horseshoes, freestream, ρ)\n\nCompute the aerodynamic forces in the Trefftz plane normal to the freestream given horseshoes, their associated strengths Γs, and a density ρ.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.farfield_influence_matrix-Tuple{Any, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.farfield_influence_matrix","text":"farfield_influence_matrix(centers, normals, points)\n\nCompute the aerodynamic influence coefficient matrix of the wake in the Trefftz plane given the center points, normal vectors, and the points of the wake panels.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.farfield_velocity-Tuple{Any, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.farfield_velocity","text":"farfield_velocity(r_i, r_j, Γ_j)\n\nCompute the induced velocity at point r_i of the wake in the Trefftz plane due to the strength Γ_j at r_j. \n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.flip_xz-Tuple{Any}","page":"API","title":"AeroMDAO.VortexLattice.flip_xz","text":"flip_xz(vector)\n\nReflect the x- and z- coordinates of a given 3-dimensional vector about the y-z and x-y planes respectively for the representation in body axes.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.geometry_to_stability_axes-Union{Tuple{T}, Tuple{Any, T}} where T<:Real","page":"API","title":"AeroMDAO.VortexLattice.geometry_to_stability_axes","text":"geometry_to_stability_axes(coords, α)\n\nConvert coordinates from geometry to stability axes with angle α.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.geometry_to_wind_axes-Tuple{Any, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.geometry_to_wind_axes","text":"geometry_to_wind_axes(coords, α, β)\ngeometry_to_wind_axes(line :: Line, α, β)\n\nConvert coordinates from geometry axes to wind axes for given angles of attack α and sideslip \\beta.``\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.horseshoe_point-Tuple{Panel3D}","page":"API","title":"AeroMDAO.VortexLattice.horseshoe_point","text":"collocation_point(panel :: Panel3D)\n\nCompute the collocation point of a Panel3D for horseshoes/vortex rings, which is the 3-quarter point on each side in the x-z plane.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.influence_coefficient","page":"API","title":"AeroMDAO.VortexLattice.influence_coefficient","text":"influence_coefficient(r, horseshoe, normal, V_hat, symmetry)\n\nCompute the influence coefficient of the velocity of a Horseshoe with trailing lines in a given direction û at a point r projected to a normal vector.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.VortexLattice.influence_matrix","page":"API","title":"AeroMDAO.VortexLattice.influence_matrix","text":"influence_matrix(horseshoes, collocation_points, normals, V_hat)\n\nAssemble the Aerodynamic Influence Coefficient (AIC) matrix given horseshoes, collocation points, associated normal vectors, and a unit vector representing the freestream.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.VortexLattice.project_yz-Tuple{Any}","page":"API","title":"AeroMDAO.VortexLattice.project_yz","text":"project_yz(vector)\nproject_yz(line :: Line)\n\nProject a given 3-dimensional vector or Line into the y-z plane.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.reflect_xz-Tuple{Any}","page":"API","title":"AeroMDAO.VortexLattice.reflect_xz","text":"reflect_xz(vector)\nreflect_xz(line :: Line)\nreflect_xz(horseshoe :: Horseshoe)\n\nReflect the y-coordinate of a given 3-dimensional vector (or Line or Horseshoe) about the x-z plane.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.stability_to_geometry_axes-Union{Tuple{T}, Tuple{Any, T}} where T<:Real","page":"API","title":"AeroMDAO.VortexLattice.stability_to_geometry_axes","text":"geometry_to_stability_axes(coords, α)\n\nConvert coordinates from stability to geometry axes with angle α.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.stream_velocity-NTuple{5, Any}","page":"API","title":"AeroMDAO.VortexLattice.stream_velocity","text":"stream_velocity(r, horseshoes, Γs, V, Ω)\n\nEvaluate the total induced velocity at a point r given Horseshoes, vortex strengths Γs, rotation rates Ω, and freestream flow vector freestream in the global reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.streamlines-Tuple{Any, Any, Any, Any, Any, Any, Integer}","page":"API","title":"AeroMDAO.VortexLattice.streamlines","text":"streamlines(point, freestream :: Freestream, horseshoes, Γs, length, num_steps)\n\nCompute the streamlines from a given starting point, a Freestream, Horseshoes and their associated strengths Γs with a specified length of the streamline and number of evaluation points.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.sum_vortices-Tuple{Any, Array{<:AeroMDAO.VortexLattice.Line}, Any}","page":"API","title":"AeroMDAO.VortexLattice.sum_vortices","text":"sum_vortices(r, vortex_lines :: Array{Line}, Γ)\n\nSums the velocities evaluated at a point r of Lines with constant strength Γ.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.surface_dynamics-Tuple{VLMSystem}","page":"API","title":"AeroMDAO.VortexLattice.surface_dynamics","text":"surface_dynamics(system :: VLMSystem; \n                 axes   :: AbstractAxisSystem = Geometry())\n\nCompute the forces and moments on the surface given the VLMSystem after performing an analysis, and the reference axis system.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.surface_forces-NTuple{7, Any}","page":"API","title":"AeroMDAO.VortexLattice.surface_forces","text":"surface_forces(hs_comp, Γ_comp, horseshoes, Γs, U, Ω, ρ)\n\nCompute the surface forces via the local Kutta-Jowkowsky theorem.\n\nFor a given array of vortex type hs_comp and their associated vortex strengths Γ_c for which to compute the forces, the arrays of horseshoes and vortex strengths Γs  of the entire aircraft, the freestream flow vector U, rotation rates Ω, and a density ρ, the velocities are evaluated at the midpoint of the bound leg of each horseshoe, excluding the contribution of the bound leg.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.surface_forces-Tuple{Any}","page":"API","title":"AeroMDAO.VortexLattice.surface_forces","text":"surface_forces(system :: VLMSystem; \n               axes   :: AbstractAxisSystem = Geometry())\n\nCompute the forces on the surface given the VLMSystem after performing an analysis, and the reference axis system.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.surface_moments-Tuple{Any}","page":"API","title":"AeroMDAO.VortexLattice.surface_moments","text":"surface_moments(system :: VLMSystem; \n                axes   :: AbstractAxisSystem = Geometry())\n\nCompute the moments on the surface given the VLMSystem after performing an analysis, and the reference axis system.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.surface_velocities-Tuple{VLMSystem}","page":"API","title":"AeroMDAO.VortexLattice.surface_velocities","text":"surface_velocities(system :: VLMSystem; \n                   axes   :: AbstractAxisSystem = Geometry())\n\nCompute the velocities on the surface given the VLMSystem after performing an analysis, and the reference axis system.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.trailing_velocity-Tuple{Any, Horseshoe, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.trailing_velocity","text":"trailing_velocity(r, horseshoe, Γ, V_hat)\n\nCompute the induced velocities at a point r of a given Horseshoe with constant strength Γ and trailing legs pointing in a given direction û, excluding the bound leg contribution.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.trefftz_plane_quantities-Tuple{AbstractArray{<:Horseshoe}, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.trefftz_plane_quantities","text":"trefftz_plane_quantities(horseshoes :: AbstractArray{<: Horseshoe}, α, β)\n\nProject Horseshoes into the Trefftz plane aligned with the wind axes angles αβ, and compute normal vectors, projection angles and lengths.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.vortex_ring-NTuple{4, Any}","page":"API","title":"AeroMDAO.VortexLattice.vortex_ring","text":"Helper function to compute the vortex ring given four points following Panel3D ordering.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.vortex_ring-Tuple{Panel3D}","page":"API","title":"AeroMDAO.VortexLattice.vortex_ring","text":"Computes the vortex rings on a Panel3D.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.VortexLattice.wind_to_geometry_axes-Tuple{Any, Any, Any}","page":"API","title":"AeroMDAO.VortexLattice.wind_to_geometry_axes","text":"wind_to_geometry_axes(coords, α, β)\n\nConvert coordinates from wind axes to geometry axes for given angles of attack α and sideslip \\beta.``\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.solve_linear","page":"API","title":"AeroMDAO.solve_linear","text":"solve_linear(horseshoes, normals, U, Ω)\n\nEvaluate and return the vortex strengths Γs given Horseshoes, their associated normal vectors (not necessarily the same as the panels' normals), the speed U and rotation vector Ω.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.velocity","page":"API","title":"AeroMDAO.velocity","text":"velocity(r, horseshoe, Γ, V_hat)\n\nCompute the induced velocities at a point r of a given Horseshoe with constant strength Γ and trailing legs pointing in a given direction û.\n\n\n\n\n\n","category":"function"},{"location":"api/#AeroMDAO.velocity-Tuple{Any, VortexRing, Any}","page":"API","title":"AeroMDAO.velocity","text":"Computes the induced velocities at a point r of a VortexRing with constant strength Γ.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.velocity-Tuple{Freestream}","page":"API","title":"AeroMDAO.velocity","text":"velocity(freestream :: Freestream)\n\nCompute the velocity of a Freestream.\n\n\n\n\n\n","category":"method"},{"location":"api/#Beams-API","page":"API","title":"Beams API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [AeroMDAO.Beams]","category":"page"},{"location":"api/#AeroMDAO.Beams.Material-NTuple{4, Any}","page":"API","title":"AeroMDAO.Beams.Material","text":"Material(E, J, σ_max, ρ)\nMaterial(; elastic_modulus, shear_modulus, yield_stress, density)\n\nDefine a Material with positive, real elastic modulus E, shear modulus G, yield stress σ_max, and density ρ.\n\nThe default assignments for the named variables are set to the properties of aluminium?\n\nArguments\n\nelastic_modulus :: Real = 85e9: Elastic modulus.\nshear_modulus :: Real = 25e9: Shear modulus.\nyield_stress :: Real = 350e6: Yield stress.\ndensity :: Real = 1.6e3: Density.\n\n\n\n\n\n","category":"method"},{"location":"api/#AeroMDAO.Beams.Tube","page":"API","title":"AeroMDAO.Beams.Tube","text":"Tube(material :: Material, length, radius, thickness)\n\nDefine a hollow tube of fixed radius with a given material, length, and thickness.\n\n\n\n\n\n","category":"type"},{"location":"api/#AeroMDAO.Beams.tube_stiffness_matrix","page":"API","title":"AeroMDAO.Beams.tube_stiffness_matrix","text":"tube_stiffness_matrix(E, G, A, Iyy, Izz, J, L)\ntube_stiffness_matrix(E, G, A, Iyy, Izz, J, L, num)\ntube_stiffness_matrix(tube :: Tube)\ntube_stiffness_matrix(tube :: Vector{Tube})\ntube_stiffness_matrix(x :: Matrix{Real})\n\nGenerate the stiffness matrix using the properties of a tube. \n\nThe required properties are the elastic modulus E, shear modulus G, area A, moments of inertia about the y- and z- axes I_yy I_zz, polar moment of inertia J, length L. A composite stiffness matrix is generated with a specified number of elements.\n\n\n\n\n\n","category":"function"},{"location":"api/#Aerostructural-API","page":"API","title":"Aerostructural API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [AeroMDAO.Aerostructural]","category":"page"},{"location":"geometry/#Geometry","page":"Geometry","title":"Geometry","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"using AeroMDAO\nusing Plots\nusing LaTeXStrings\ngr()","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"The geometry setup for aircraft analyses is described here.","category":"page"},{"location":"geometry/#Airfoil-Parametrization","page":"Geometry","title":"Airfoil Parametrization","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"AeroMDAO provides some basic parametrizations commonly used for airfoils, with conversion to the camber-thickness representation and vice versa.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"NACA 4-digit Airfoil Parametrization","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"naca4(digits :: NTuple{4, Real};  # Digits, e.g. (2,4,1,2)\n      sharp_trailing_edge = true) # Sharp or blunt trailing edge","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"airfoil = naca4(2,4,1,2)","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Kulfan Class Shape Transformation (CST) Method","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"kulfan_CST(alpha_u                 :: Vector{Real},    # Upper surface parameters\n           alpha_l                 :: Vector{Real},    # Lower surface parameters\n           (dz_u, dz_l) = (0., 0.) :: NTuple{2, Real}, # Upper and lower trailing edge points\n           (LE_u, LE_l) = (0., 0.) :: NTuple{2, Real}, # Leading-edge modification coefficient\n           n = 40                  :: Integer)         # Number of points on each surface","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"alpha_u = [0.1, 0.3, 0.2, 0.15, 0.2]\nalpha_l = [-0.1, -0.1, -0.1, -0.001, -0.02]\ndzs     = (1e-4, 1e-4)\nfoil    = kulfan_CST(alpha_u, alpha_l, dzs, 0.2)","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Camber-Thickness Representation","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"coordinates_to_camber_thickness(coords      :: Array{2, Real}, # 2D coordinates\n              num = 40    :: Integer)        # Number of points for distributions ","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"foilpath  = \"path/to/your/airfoil.dat\"    # Airfoil coordinates file path\ncoords    = read_foil(foilpath)           # Read coordinates file\ncos_foil  = cosine_foil(coords, 51)       # Cosine spacing with 51 points on upper and lower surfaces\nxcamthick = coordinates_to_camber_thickness(cos_foil)       # Convert to camber-thickness representation\nfoiler    = camthick_foil(xcamthick[:,1], # x-components\n                          xcamthick[:,2], # Camber distribution\n                          xcamthick[:,3]) # Thickness distribution","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"digits  = (2,4,1,2)\nairfoil = Foil(naca4(digits))\nxcamthick = camber_thickness(airfoil, 60)\ncoords = camber_thickness_to_coordinates(xcamthick[:,1], xcamthick[:,2], xcamthick[:,3])\nupper, lower = split_foil(coordinates(airfoil));\nx_upper, y_upper = upper[:,1], upper[:,2]\nx_lower, y_lower = lower[:,1], lower[:,2]\nplot(aspectratio = 1)\naf_plot = plot(aspect_ratio = 1, xlabel = L\"(x/c)\", ylabel = L\"y\")\nplot!(x_upper, y_upper, ls = :solid, lw = 2, c = :cornflowerblue, label = \"NACA $(digits...) Upper\")\nplot!(x_lower, y_lower, ls = :solid, lw = 2, c = :orange, label = \"NACA $(digits...) Lower\")\nplot!(xcamthick[:,1], xcamthick[:,2], ls = :dash, lw = 2, c = :burlywood3, label = \"NACA $(digits...) Camber\")\nplot!(xcamthick[:,1], xcamthick[:,3], ls = :dash, lw = 2, c = :grey, label = \"NACA $(digits...) Thickness\")","category":"page"},{"location":"geometry/#Wing-Parametrization","page":"Geometry","title":"Wing Parametrization","text":"","category":"section"},{"location":"geometry/#HalfWing","page":"Geometry","title":"HalfWing","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"The following image depicts the parametrization schema used for wing planforms in terms of nested trapezoids.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"(Image: )","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"This parametrization is implemented as a composite type called a HalfWing.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"HalfWing(foils     :: Vector{Foil}, # Foil profiles\n         chords    :: Vector{Real}, # Chord lengths\n         twists    :: Vector{Real}, # Twist angles (deg)\n         spans     :: Vector{Real}, # Section span lengths\n         dihedrals :: Vector{Real}, # Dihedral angles (deg)\n         LE_sweeps :: Vector{Real}; # Leading-edge sweep angles (deg)\n         position = zeros(3),\n         angle    = 0.,\n         axis     = [1., 0., 0.])","category":"page"},{"location":"geometry/#Wing","page":"Geometry","title":"Wing","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"We can create a Wing by feeding two HalfWings to it. Alternatively, a convenience method is provided by simply replacing HalfWing with Wing using the previous definition.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Wing(foils     :: Vector{Foil}, # Foil profiles\n     chords    :: Vector{Real}, # Chord lengths\n     twists    :: Vector{Real}, # Twist angles (deg)\n     spans     :: Vector{Real}, # Section span lengths\n     dihedrals :: Vector{Real}, # Dihedral angles (deg)\n     LE_sweeps :: Vector{Real}; # Leading-edge sweep angles (deg)\n     position = zeros(3),\n     angle    = 0.,\n     axis     = [1., 0., 0.])","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"There is also a convenient function for printing this information, whose last optional argument provides the name of the wing. Pretty Tables is used for pretty-printing.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"We can obtain the relevant geometric information of the wing for design analyses by calling convenience methods, which automatically perform the necessary calculations on the nested trapezoidal planforms.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"AR = aspect_ratio(wing)\nb  = span(wing)\nS  = projected_area(wing)\nc  = mean_aerodynamic_chord(wing)\n\nx_w, y_w, z_w = wing_mac = mean_aerodynamic_center(wing)","category":"page"},{"location":"geometry/#Additional-Methods","page":"Geometry","title":"Additional Methods","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Wings with single sections can be defined with the following constructors and keywords.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"HalfWingSection(; span, dihedral, LE_sweep, taper, root_chord,\n                  root_twist, tip_twist, root_foil, tip_foil,\n                  position, angle, axis)\n\nWingSection(; span, dihedral, LE_sweep, taper, root_chord,\n              root_twist, tip_twist, root_foil, tip_foil,\n              position, angle, axis)","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Arguments","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"span       :: Real         = 1.: Span length \ndihedral   :: Real         = 1.: Dihedral angle (degrees)\nLE_sweep   :: Real         = 0.: Leading-edge sweep angle (degrees)\ntaper      :: Real         = 1.: Taper ratio of tip to root chord\nroot_chord :: Real         = 1.: Root chord length\nroot_twist :: Real         = 0.: Twist angle at root (degrees)\ntip_twist  :: Real         = 0.: Twist angle at tip (degrees)\nroot_foil  :: Array{Real}  = naca4((0,0,1,2)): Foil coordinates at root\ntip_foil   :: Array{Real}  = naca4((0,0,1,2)): Foil coordinates at tip\nposition   :: Vector{Real} = zeros(3): Position\nangle      :: Real         = 0.: Angle of rotation (degrees)\naxis       :: Vector{Real} = [0.,1.,0.]: Axis of rotation","category":"page"},{"location":"geometry/#Example","page":"Geometry","title":"Example","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"airfoil    = naca4((2,4,1,2))\nwing_right = HalfWing(foils     = Foil.(airfoil for i in 1:3),\n                      chords    = [0.4, 0.2, 0.1],\n                      twists    = [0., 2., 5.],\n                      spans     = [1.0, 0.1],\n                      dihedrals = [0., 60.],\n                      LE_sweeps = [0., 30.])\n\nwing = Wing(wing_right);\n\nprint_info(wing, \"My Wing\")","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"You can access each side of a Wing by calling either wing.left or wing.right, and the previous functions should work identically on these HalfWings.","category":"page"},{"location":"geometry/#Fuselage-Parametrization","page":"Geometry","title":"Fuselage Parametrization","text":"","category":"section"},{"location":"structures/#Structures","page":"Structures","title":"Structures","text":"","category":"section"},{"location":"structures/","page":"Structures","title":"Structures","text":"using AeroMDAO\nusing Plots\nusing LaTeXStrings\ngr()","category":"page"},{"location":"structures/#Euler-Bernoulli-Beam-Model","page":"Structures","title":"Euler-Bernoulli Beam Model","text":"","category":"section"},{"location":"structures/#Example","page":"Structures","title":"Example","text":"","category":"section"},{"location":"structures/","page":"Structures","title":"Structures","text":"# Deflection stiffness matrix\nK = bending_stiffness_matrix([1., 1.], [1., 1.], [2., 2.], :z)\n\n## 1. Fixed hinged beam subjected to force and moment at the center\nA = K[[3,4,6],[3,4,6]]  # v2, φ2, φ3\nb = [-1000, 1000, 0]    # F2, M2, M3\n\nx = A \\ b\n\n## Forces\nF1 = K * [ 0.; 0.; x[1:2]; 0.; x[3] ]\n\n## 2. Propped cantilever beam with force at one end\nA = K[[1,2,4],[1,2,4]] # v1, φ1, φ2\nb = [10, 0, 0]\n\nx = A \\ b\n\n## Forces\nF2 = K * [ x[1:2]; 0.; x[3]; 0.; 0. ]","category":"page"},{"location":"aerodynamics/#Aerodynamics","page":"Aerodynamics","title":"Aerodynamics","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"using AeroMDAO\nusing Plots\nusing LaTeXStrings\ngr()","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The following sections describe different use-cases of AeroMDAO.","category":"page"},{"location":"aerodynamics/#Doublet-Source-Panel-Method","page":"Aerodynamics","title":"Doublet-Source Panel Method","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"AeroMDAO provides convenience functions using its specific types for analyses.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The Foil type converts the coordinates into a friendly type for analyses. ","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"airfoil = naca4((2,4,1,2))\nfoil    = Foil(airfoil)","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The Uniform2D type consists of the freestream speed and angle of attack. ","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"V, α    = 1.0, 3.0 \nuniform = Uniform2D(V, α)","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"To analyse this foil with these boundary conditions using the incompressible 2D doublet-source panel method, the following method is called. Optional named arguments are provided to specify whether the source terms are non-zero, the length of the wake, and the number of panels for the analysis.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"solve_case(foil            :: Foil,\n           uniform         :: Uniform2D;\n           num_panels = 60 :: Integer)","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The method returns the lift coefficient calculated by the doublet strength of the wake panel, the lift, moment and pressure coefficients over the panels, and the panels generated for post-processing.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"cl, cls, cms, cps, panels = \n  solve_case(foil,\n             uniform;\n             num_panels = 80)","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"digits  = (0,0,1,2);\nairfoil = Foil(naca4(digits; sharp_trailing_edge = true))  #hide\nV, α = 1.0, 5.0             #hide\nuniform = Uniform2D(V, α)   #hide\ncl, cls, cms, cps, panels = solve_case(airfoil, \n                                       uniform;\n                                       viscous = false,\n                                       sources = false, \n                                       wake_length = 1e3,\n                                       wake_panels = 100,\n                                       num_panels = 80)\n\nupper, lower = split_foil(coordinates(airfoil)); #hide\nx_upper, y_upper = upper[:,1], upper[:,2] #hide\nx_lower, y_lower = lower[:,1], lower[:,2] #hide\n\nprintln(\"Cl: $cl\")\nprintln(\"Σᵢ Clᵢ: $(sum(cls))\")\nprintln(\"Σᵢ Cmᵢ: $(sum(cms))\")","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"digits  = (0,0,1,2); #hide\nairfoil = Foil(naca4(digits; sharp_trailing_edge = true))  #hide\nV, α = 1.0, 5.0             #hide\nuniform = Uniform2D(V, α)   #hide\ncl, cls, cms, cps, panels = solve_case(airfoil, #hide\n                                       uniform; #hide\n                                       viscous = false, #hide\n                                       sources = false,  #hide\n                                       wake_length = 1e3, #hide\n                                       wake_panels = 100, #hide\n                                       num_panels = 80) #hide\n\nupper, lower = split_foil(coordinates(airfoil)); #hide\nx_upper, y_upper = upper[:,1], upper[:,2] #hide\nx_lower, y_lower = lower[:,1], lower[:,2] #hide\n\nget_surface_values(panels, vals, surf = \"lower\") = [ (collocation_point(panel)[1], val) for (val, panel) in zip(vals, panels) if panel_location(panel) == surf ] #hide\ncp_lower = get_surface_values(panels, cps, \"lower\") #hide\ncp_upper = get_surface_values(panels, cps, \"upper\") #hide\nplot(yflip = true, xlabel=L\"(x/c)\", ylabel = L\"$C_p$\") #hide\nplot!(cp_upper, ls = :dash, lw = 2, c = :cornflowerblue, label = \"Upper\") #hide\nplot!(cp_lower, ls = :dash, lw = 2, c = :orange, label = \"Lower\") #hide\nplot!(x_upper, -y_upper,  #hide\n        ls = :solid, lw = 2, c = :cornflowerblue, label = \"NACA $(digits...) Upper\") #hide\nplot!(x_lower, -y_lower,  #hide\n        ls = :solid, lw = 2, c = :orange, label = \"NACA $(digits...) Lower\") #hide","category":"page"},{"location":"aerodynamics/#Vortex-Lattice-Method","page":"Aerodynamics","title":"Vortex Lattice Method","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The vortex lattice method used in AeroMDAO follows Mark Drela's Flight Vehicle Aerodynamics.","category":"page"},{"location":"aerodynamics/#Meshing","page":"Aerodynamics","title":"Meshing","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The geometry \"engine\" generates panels for horseshoes and the camber distribution using the airfoil data in the definition of the wing.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"WingMesh(wing                    :: AbstractWing,     # Wing type\n         span_num                :: Vector{Integer},  # Number of spanwise panels\n         chord_num               :: Integer,          # Number of chordwise panels\n         span_spacing = Cosine() :: AbstractSpacing   # Spanwise distribution\n        )","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"wing_mesh = WingMesh(wing, [12, 3], 6);\nwing_mesh.camber_mesh","category":"page"},{"location":"aerodynamics/#Aircraft-Definition","page":"Aerodynamics","title":"Aircraft Definition","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"Aircraft analysis by definition of multiple lifting surfaces using the HalfWing or Wing types are also supported, but is slightly more complex due to the increases in user specifications. Particularly, you will have to mesh the different components by yourself by specifying the number of chordwise panels, spanwise panels and their associated spacings.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"This method returns the horseshoe panels for the analysis, and the associated normal vectors based on the camber distribution of the wing. Consider a \"vanilla\" aircraft, in which you have a wing, horizontal tail, and vertical tail.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"# Wing\nwing = Wing(foils     = Foil.(fill(naca4(2,4,1,2), 2)),\n            chords    = [1.0, 0.6],\n            twists    = [2.0, 0.0],\n            spans     = [4.0],\n            dihedrals = [5.],\n            LE_sweeps = [5.]);\n\nx_w, y_w, z_w = wing_mac = mean_aerodynamic_center(wing)\nS, b, c = projected_area(wing), span(wing), mean_aerodynamic_chord(wing);\n\n# Horizontal tail\nhtail = Wing(foils     = Foil.(fill(naca4(0,0,1,2), 2)),\n             chords    = [0.7, 0.42],\n             twists    = [0.0, 0.0],\n             spans     = [1.25],\n             dihedrals = [0.],\n             LE_sweeps = [6.39],\n             position  = [4., 0, 0],\n             angle     = -2.,\n             axis      = [0., 1., 0.])\n\n# Vertical tail\nvtail = HalfWing(foils     = Foil.(fill(naca4(0,0,0,9), 2)),\n                 chords    = [0.7, 0.42],\n                 twists    = [0.0, 0.0],\n                 spans     = [1.0],\n                 dihedrals = [0.],\n                 LE_sweeps = [7.97],\n                 position  = [4., 0, 0],\n                 angle     = 90.,\n                 axis      = [1., 0., 0.])\n\n# Print info\nprint_info(wing,  \"Wing\")\nprint_info(htail, \"Horizontal Tail\")\nprint_info(vtail, \"Vertical Tail\")\n\n## Meshing\nwing_mesh  = WingMesh(wing, [12], 6, \n                      span_spacing = Cosine()\n                     )\nhtail_mesh = WingMesh(htail, [12], 6, \n                      span_spacing = Cosine()\n                     )\nvtail_mesh = WingMesh(vtail, [12], 6, \n                      span_spacing = Cosine()\n                     )","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The horseshoes for the analysis are generated using the make_horseshoes function.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"wing_horsies = make_horseshoes(wing_mesh),","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"To run analyses with multiple components, you will have to assemble this information using the exported ComponentVector (built by ComponentArrays.jl). This names the components using a symbolic tag, and all the components are treated as a single vector.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"aircraft = ComponentVector(\n                           wing  = wing_horsies,\n                           htail = make_horseshoes(htail_mesh),\n                           vtail = make_horseshoes(vtail_mesh)\n                          );","category":"page"},{"location":"aerodynamics/#Freestream-Condition","page":"Aerodynamics","title":"Freestream Condition","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"This geometry is analysed at given freestream angles of attack and sideslip (in degrees), which define the boundary conditions of the problem.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"fs  = Freestream(alpha = 0.0, \n                 beta  = 0.0, \n                 omega = [0., 0., 0.]);","category":"page"},{"location":"aerodynamics/#References","page":"Aerodynamics","title":"References","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"For an analysis, you require ambient reference conditions. Specifically, you need the density rho and a reference location r_textref for calculating forces and moments. These dynamics are non-dimensionalized using the wing's characteristics as reference.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"refs = References(speed    = 1.0, \n                  density  = 1.225,\n                  area     = projected_area(wing),\n                  span     = span(wing),\n                  chord    = mean_aerodynamic_chord(wing),\n                  location = mean_aerodynamic_center(wing))","category":"page"},{"location":"aerodynamics/#Analysis","page":"Aerodynamics","title":"Analysis","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"system = solve_case(\n                    aircraft   :: Vector{Horseshoe}, # Horseshoes on the aircraft surface\n                    fs         :: Freestream,        # Freestream values\n                    refs       :: References;        # Reference values\n                    print            = true,         # Prints the results for only the aircraft\n                    print_components = true,         # Prints the results for all components\n                   );","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"It returns a system which can be used to determine quantities of interest such as the dynamics.","category":"page"},{"location":"aerodynamics/#Dynamics","page":"Aerodynamics","title":"Dynamics","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"The analysis computes the aerodynamic forces by surface pressure integration for nearfield forces. You can specify the axis system for the nearfield forces, with choices of Geometry(), Body(), Wind(), Stability(). The wind axes are used by default.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"# Compute dynamics\nax       = Geometry() # Body(), Stability(), Wind()\nCFs, CMs = surface_coefficients(system; axes = ax)\nFs       = surface_forces(system)\nFs, Ms   = surface_dynamics(system; axes = ax) ","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"A Trefftz plane integration is employed to obtain farfield forces.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"note: Note\nThe farfield forces are usually more accurate compared to nearfield forces, as the components do not interact as in the evaluation of the Biot-Savart integrals for the latter.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"To obtain the nearfield and farfield coefficients of the components (in wind axes by definition):","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"nfs = nearfield_coefficients(system)\nffs = farfield_coefficients(system)","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"To obtain the total nearfield and farfield force coefficients:","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"nf  = nearfield(system) \nff  = farfield(system)","category":"page"},{"location":"aerodynamics/#Derivatives","page":"Aerodynamics","title":"Derivatives","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"AeroMDAO uses the ForwardDiff.jl package, which leverages forward-mode automatic differentiation to obtain derivatives of certain quantities of interest. Particularly, with respect to the angles of attack and sideslip, and the non-dimensionalized roll rates at low computational cost for stability analyses. A unique feature which is not easily obtained from other implementations is the stability derivatives of each component. To obtain these quantities, simply replace solve_case() with solve_case_derivatives(), which will return data consisting of the nearfield, farfield and stability derivative coefficients.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"note: Note\nThis is due to limitations of using closures in ForwardDiff, and hence only these quantities are provided using this function.","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"solve_case_derivatives(\n                       aircraft, fs, refs;\n                       print            = true,    # Prints the results for only the aircraft\n                       print_components = true,    # Prints the results for all components\n                      );","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"You can pretty-print the stability derivatives with the following function, whose first argument again provides the name of the wing:","category":"page"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"print_derivatives(dv_data.wing, \"My Wing\")","category":"page"},{"location":"aerodynamics/#Example","page":"Aerodynamics","title":"Example","text":"","category":"section"},{"location":"aerodynamics/","page":"Aerodynamics","title":"Aerodynamics","text":"using AeroMDAO\n\n# Wing\nwing = Wing(foils     = Foil.(fill(naca4(2,4,1,2), 2)),\n            chords    = [1.0, 0.6],\n            twists    = [2.0, 0.0],\n            spans     = [4.0],\n            dihedrals = [5.],\n            LE_sweeps = [5.])\n\n# Horizontal tail\nhtail = Wing(foils     = Foil.(fill(naca4(0,0,1,2), 2)),\n             chords    = [0.7, 0.42],\n             twists    = [0.0, 0.0],\n             spans     = [1.25],\n             dihedrals = [0.],\n             LE_sweeps = [6.39],\n             position  = [4., 0, 0],\n             angle     = -2.,\n             axis      = [0., 1., 0.])\n\n# Vertical tail\nvtail = HalfWing(foils     = Foil.(fill(naca4(0,0,0,9), 2)),\n                 chords    = [0.7, 0.42],\n                 twists    = [0.0, 0.0],\n                 spans     = [1.0],\n                 dihedrals = [0.],\n                 LE_sweeps = [7.97],\n                 position  = [4., 0, 0],\n                 angle     = 90.,\n                 axis      = [1., 0., 0.])\n\n# Printing information\nprint_info(wing, \"Wing\")\nprint_info(htail, \"Horizontal Tail\")\nprint_info(vtail, \"Vertical Tail\")\n\n# Meshing\nwing_mesh  = WingMesh(wing, [12], 6, \n                      span_spacing = Cosine()\n                     )\nhtail_mesh = WingMesh(htail, [12], 6, \n                      span_spacing = Cosine()\n                     )\nvtail_mesh = WingMesh(vtail, [12], 6, \n                      span_spacing = Cosine()\n                     )\n\n# Aircraft assembly\naircraft = ComponentArray(\n                          wing  = make_horseshoes(wing_mesh),\n                          htail = make_horseshoes(htail_mesh),\n                          vtail = make_horseshoes(vtail_mesh)\n                         );\n\n# Define freestream condition\nfs  = Freestream(alpha = 0.0, \n                 beta  = 0.0, \n                 omega = [0., 0., 0.]);\n\n# Define reference values\nrefs = References(speed    = 1.0, \n                  area     = projected_area(wing),\n                  span     = span(wing),\n                  chord    = mean_aerodynamic_chord(wing),\n                  density  = 1.225,\n                  location = mean_aerodynamic_center(wing));\n\n# Solve case\nsystem = solve_case(\n        aircraft, fs, refs;\n        print            = true, # Prints the results for only the aircraft\n        print_components = true, # Prints the results for all components\n    );\n\ndv_data = solve_case_derivatives(\n        aircraft, fs, refs;\n        # print            = true, # Prints the results for only the aircraft\n        print_components   = true, # Prints the results for all components\n    );","category":"page"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The following theory described is meant to be minimal, with mainly the equations presented for reference when reading the code.","category":"page"},{"location":"theory/#Aerodynamics","page":"Theory","title":"Aerodynamics","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The aerodynamic analyses in AeroMDAO mainly utilize potential flow theory and solve problems using a boundary element method. This essentially is the following Laplace equation problem with the following Robin (?) boundary conditions:","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"nabla^2 phi = 0 quad mathbf V equiv nabla phi cdot hatmathbf n = 0 quad lim_mathbf r to infty phi(mathbf r) to 0","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Implementations for viscous-inviscid analyses are in progress.","category":"page"},{"location":"theory/#Doublet-Source-Panel-Method","page":"Theory","title":"Doublet-Source Panel Method","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The doublet-source panel method predicts inviscid, incompressible, irrotational, isentropic external flow over surfaces in 2 dimensions. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Source and doublet singularities are placed on the surface, and boundary conditions are imposed on their induced velocity to obtain a well-posed problem. The induced velocity is evaluated by the corresponding free-field Green function for each singularity. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"As the system is linear, the velocities are added together to obtain the total induced velocity at a point mathbf r.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"","category":"page"},{"location":"theory/#Vortex-Lattice-Method","page":"Theory","title":"Vortex Lattice Method","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The vortex lattice method predicts inviscid, incompressible, irrotational, isentropic external flow over \"thin\" surfaces in 3 dimensions. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Vortex filaments are placed on the surface, and boundary conditions are imposed on their induced velocity to obtain a well-posed problem. The induced velocity is evaluated by the Biot-Savart integral for a vortex line of length ell with a constant circulation strength Gamma.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"mathbf V(mathbf r mathbf r) = fracGamma4pi int_0^ell fracdboldsymbolell times (mathbf r - mathbf r)mathbf r - mathbf r^3","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The vortices can be set up in various configurations consisting of bound or semi-infinite filaments, commonly in the form of horseshoes or vortex rings. A quasi-steady freestream condition with velocity mathbf U and rotation boldsymbolOmega (in the body's frame) is imposed for the external flow. The induced velocity at a point is given by:","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"mathbf V_infty(mathbf r) = - (mathbf U + boldsymbolOmega times mathbf r)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"As the system is linear, the velocities are added together to obtain the total induced velocity at a point mathbf r.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"mathbf V(mathbf r) = sum_i fracGamma_i4pi int_0^ell_i fracdboldsymbolell_i times (mathbf r - mathbf r_i)mathbf r - mathbf r_i^3 + mathbf V_infty(mathbf r)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Imposing the Neumann boundary condition mathbf V cdot hatmathbf n = 0 defines the problem. The construction, in essence, fundamentally results in the following linear system to be solved:","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"mathbf A boldsymbolGamma = -V_infty cdot hatmathbf n_i _i = 1 ldots N","category":"page"},{"location":"theory/#Structures","page":"Theory","title":"Structures","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The structural analyses in AeroMDAO utilize linear finite-element methods. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Particularly, a 2-dimensional beam element model has been implemented following the standard formulation using cubic Hermite shape functions based on Euler-Bernoulli beam theory. These are embedded into a 3-dimensional local coordinate system in the vortex lattice method without loss of generality.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The linear system consisting of the stiffness matrix mathbf K and load vector mathbf f are solved to obtain the displacement vector boldsymboldelta.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"mathbf K boldsymboldelta = mathbf f","category":"page"},{"location":"theory/#Aeroelasticity","page":"Theory","title":"Aeroelasticity","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The vortex lattice method and beam element model are combined into a coupled system to perform static aeroelastic analyses. The analysis is made nonlinear via promotion of the angle of attack alpha to a variable by specifying the load factor n with a given weight W at fixed sideslip angle beta.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Define mathbf x = boldsymbolGamma boldsymboldelta alpha as the state vector satisfying the residual equations:","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"beginalign*\n    mathcal R_A(mathbf x)  = mathbf A(boldsymboldelta) boldsymbolGamma - mathbf V_infty(alpha) cdot mathbf n_i(boldsymboldelta)_i = 1ldots N \n    mathcal R_S(mathbf x)  = mathbf K boldsymboldelta - mathbf f(boldsymboldelta boldsymbolGamma alpha) \n    mathcal R_L(mathbf x)  = L(boldsymboldelta boldsymbolGamma alpha) - n W \nendalign*","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"where the lift L is obtained from the Kutta-Jowkowski theorem.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"D Y L = mathbf R_B^W(alpha beta)left(sum_i = 1^N rho mathbf V_i times  boldsymbolGamma_i mathbf l_i(boldsymboldelta)right)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"and the structural load vector mathbf f is obtained from conservative and consistent load averaging of the nearfield Kutta-Jowkowski forces.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"","category":"page"},{"location":"theory/#Flight-Dynamics","page":"Theory","title":"Flight Dynamics","text":"","category":"section"},{"location":"theory/#Longitudinal-Motion","page":"Theory","title":"Longitudinal Motion","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"A standard three degrees-of-freedom rigid body model is used for performing flight dynamics analyses in the 2-dimensional longitudinal plane formulated as an initial-value problem. The coupled differential equations governing in a canonical state-space representation, with the time-evolution of the state vector mathbf x driven by the forcing function mathbf f are shown below subject to initial conditions mathbf x_0.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"beginalign*\n    fracdmathbf xdt  = mathbf f(mathbf x t) \n    fracddt\n    beginbmatrix\n        u_b \n        w_b \n        Q \n        x_e \n        y_e \n        Theta \n        delta_e \n        m\n    endbmatrix  =\n    beginbmatrix\n        -Qw_b + (T - D(V_infty)cosalpha + L(V_infty delta_e)sinalpha - WsinTheta)  m \n        Qu_b + (  - D(V_infty)sinalpha - L(V_infty delta_e)cosalpha + WcosTheta)  m \n        (M_A(alpha delta_e hat Q) - TDelta_zT)  I_yy \n        u_b cosTheta - w_b sinTheta \n        u_b sinTheta + w_b cosTheta \n        Q  \n        g(mathbf x t) \n        -c_T T\n    endbmatrix\nendalign*","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The fuel burn over time (viz. reduction of mass m) is computed using a specific fuel consumption value with a linear dependence on the thrust. A manual controller law for the elevator deflection angle delta_e can also be implemented by providing the function g(mathbf x t).","category":"page"},{"location":"theory/#Full-Space","page":"Theory","title":"Full Space","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"A standard six degrees-of-freedom rigid body model is used for performing flight dynamics analyses in 3 dimensions.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"","category":"page"},{"location":"theory/#References","page":"Theory","title":"References","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"Mark Drela. Flight Vehicle Aerodynamics. MIT Press, 2014.\nJoseph Katz and Allen Plotkin. Low-Speed Aerodynamics, Second Edition. Cambridge University Press, 2001.","category":"page"},{"location":"#AeroMDAO-–-Aircraft-Design-Platform","page":"Home","title":"AeroMDAO – Aircraft Design Platform","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AeroMDAO is meant to be a toolbox for aircraft design analyses. It currently provides convenient methods for developing studies in aerodynamics and structures, with implementations in other relevant fields such as flight dynamics and propulsion in progress.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Authors: Arjit Seth, Stephane Redonnet, and Rhea P. Liem","category":"page"},{"location":"#Objectives","page":"Home","title":"Objectives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The current focus is to enable tutorials in computation for undergraduates in an aerospace educational curriculum, particularly at The Hong Kong University of Science and Technology. For this purpose, the code is written in a functional style replicating the mathematics presented in textbooks as much as possible.","category":"page"},{"location":"","page":"Home","title":"Home","text":"An additional aim is to write code compatible with automatic differentiation libraries written in Julia.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Disclaimer: The implementations are work-in-progress, and hence the results may not be entirely accurate. Please exercise caution when interpreting the results until validation cases are added.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functioning:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Basic geometric tools for airfoil processing and wing design. \nSteady, inviscid, incompressible, isentropic 2D and 3D aerodynamic analyses.\n2D - Doublet-source panel method\n3D - Vortex lattice method with derivatives\nEmpirical viscous drag prediction methods for wings.\nFinite-element beam model based on Euler-Bernoulli theory for structural analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"In progress:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Aeroelastic analyses coupling vortex lattice and beam element models.\n2D integral boundary layer solver for viscous-inviscid analyses.\nGeneric, flexible and efficient flight dynamics integrator in 2 and 3 dimensions.\nFuselage geometry parametrization and aerodynamic implementation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"AeroMDAO\")\njulia> Pkg.test(\"AeroMDAO\")\njulia> using AeroMDAO","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use AeroMDAO in your research, please cite the following until any relevant material is actually published:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{aeromdao,\n  author  = {Arjit Seth, Rhea P. Liem, Stephane Redonnet},\n  title   = {AeroMDAO},\n  url     = {https://github.com/GodotMisogi/AeroMDAO},\n  version = {0.3.0},\n  date    = {2021-01-04},\n}","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"geometry.md\", \"aerodynamics.md\", \"structures.md\", \"theory.md\", \"api.md\"]\nDepth =  5","category":"page"}]
}
